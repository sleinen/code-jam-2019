(defun solve (setno)
  (let ((p (sb-ext:run-program "/usr/local/bin/python3" (list "testing_tool.py" (format nil "~D" setno))
			       :input :stream :output :stream :wait nil)))
    (assert p)
    (unwind-protect
	 (let ((io (make-two-way-stream (sb-ext:process-output p) (sb-ext:process-input p))))
	   (let ((ncase (read io)))
	     (dotimes (caseno ncase)
	       (let* ((n (read io))
		      (b (read io))
		      (f (read io)))
		 (solve-case n b f io)))))
      (sb-ext:process-close p))))

(defun solve-case (n b f io)
  (let ((broken '()))
    (dotimes (k n)
      (let ((out (make-string n :initial-element #\1)))
	(setf (char out k) #\0)
	(warn "Trying ~A" out)
	(format io "~A~%" out)
	(finish-output io)
	(let ((response (read-line io)))
	  (warn "  Response: ~A" response)
	  (assert (= (length response) (- n b)))
	  (unless (find #\0 response)
	    (push k broken)))))
    (assert (= (length broken) b))
    (warn "Submitting ~{~D~^ ~}~%" (sort broken #'<))
    (format io "~{~D~^ ~}~%" (sort broken #'<))
    (finish-output io)
    (let ((verdict (read io)))
      (warn "Verdict: ~S" verdict))))
